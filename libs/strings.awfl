# String operations
### string-from-list 1/1, string-to-list 1/1, string-concat 2/1, string-concat-list 2/1, string-split-at 2/2, string-len 1/1, string-insert-at 3/1, string-eq 2/1, string-split 2/1

include basicmaths
include lists


## Convert a list (of codepoints) into a string (via pushi instruction)
```
def string-from-list  1   # l
  as l                    #    l -> l

  def convert  1
    dup                   # i i
    l swap pull           # i l elem
    swapover              # elem l i
    pushi                 # l (updated)
    up ...l               #   l -> l
  end  0

  l.num &convert for-range  # (loop)
  3 l :type pushi           # convert type and leave string on stack
end  1
```
assert
  ""
  "abc"
  "54343/1000"
from
  [ ] string-from-list
  [ 97 98 99 ] string-from-list
  54.343 string-from-list
end


## Convert a string into a list (of codepoints)
```
def string-to-list  1
  as s

  dyndef convert  1  # i
    dup              # i i
    s swap pull      # i s char
    swapover         # char s i
    pushi            # s (updated)
    up ...s
  end  0

  s.num &convert for-range  # (loop)
  4 s :type pushi
end  1
```
assert [ ]           from  ""     string-to-list  end
assert [ 88 ]        from  :X     string-to-list  end
assert [ 97 98 99 ]  from  "abc"  string-to-list  end


## Concatenate two strings
```
def string-concat  2
  list-concat
  string-from-list
end  1
```
assert
  "abcde"
from
  :ab "cde" string-concat
end


## Concatenate a list of strings
```
def string-concat-list  2
  as separator
  as list
  list list-len as remain
  list list-to-stack      # roll out entire list

  def concat'  0
    remain
    1 le if break
    separator swap string-concat string-concat
    remain 1 - up remain
    concat'
  end  ?

  concat'
end  1
```
assert
  "ab cd e"
from
  [ :ab :cd :e ] " " string-concat-list
end


## String splitting at index
```
def string-split-at  2    # string index
  list-split-at           # list1 list2
  string-from-list        # list1 s2
  swap                    # s2 list1
  string-from-list        # s2 s1
  swap                    # s1 s2
end  2
```
assert
  "abc"
  "de"
from
  "abcde" 3 string-split-at
end
assert "abcde" from "abcde" 2 string-split-at string-concat end


## String splitting by separator
```
def string-split  2   # string separator
  string-to-list swap
  string-to-list swap
  list-split  &string-from-list map
end  1  # list of strings
```
assert [ "ab" :c "de" ]  from  "abXcXde" :X string-split  end
assert [ :a :b :c ]      from  "abc"     "" string-split  end


## Get string length
```
def string-len  1
  :num pull popnos
end  1
```
assert
  3 0 1
from
  "abc" string-len
  "" string-len
  :c string-len
end


## Insert a string at a position
```
def string-insert-at  3     # string index insert-string
  as toinsert
  as index
  index string-split-at     # prefix suffix
  swap toinsert string-concat
  swap string-concat
end  1
```
assert
  :axbc
  :xabc
  :abcx
from
  "abc" 1 :x string-insert-at
  "abc" 0 :x string-insert-at
  "abc" 3 :x string-insert-at
end


## Compare two strings
```
alias string-eq
  list-eq
end
```
assert  False  from  :a :ab  string-eq  end
assert  True   from  :ab :ab string-eq  end
assert  False  from  :xy :xz string-eq  end
assert  True   from  :x  :x  string-eq  end
assert  False  from  :x  :O  string-eq  end
assert  False  from  ""  " " string-eq  end
assert  False  from  " "  "" string-eq  end
