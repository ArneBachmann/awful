# Set operations #
### set-create, set-as-list, set-add, set-from-list, set-remove, set-union, set-intersect, set-difference

include basicmaths
include lists
include loops


## Create an empty set ##
```
def set-create  0
  7 [ ] :type pushi
end  1
```


## Convert to list ##
def set-as-list  1
  4 swap :type pushi  # convert internal type
end  1  # tested below


## Add one element ##
```
def set-add  2          # set element
  as value
  as set
  set value list-find   # T|F index|nil
  as index
  if break set          # found: nothing to do
  set value list-append # add to set-"list"
end  1                  # set (updated)
```
assert
  [ 1 :x ]
from
  set-create
  1 set-add
  :x set-add
  set-as-list
end


## Convert from list ##
def set-from-list  1
  :num pull as num
  as list'
  set-create as result

  def insert  1
    list' swap pull popnos
    result swap set-add up result
  end  0

  0 num 1 &insert for
  result
end  1
assert
  [ 1 2 3 ]
from
  [ 1 2 3 2 1 ] set-from-list set-as-list
end


## Check existence of an value ##
def set-contains  2   # set value
  list-find pop
end  1
assert
  False True
from
  set-create 1 set-add 2 set-add as set
  set 0 set-contains
  set 2 set-contains
end


## Remove one element ##
```
def set-remove  2     # set element
  as value
  as set
  set value list-find
  as index
  unless break        # not found -> do nothing TODO or return error code or raise exception? returning the set seems better
  set index list-swap-last
end  1                # set (updated)
```
assert
  [ 1 3 ]
from
  set-create 1 set-add 2 set-add 3 set-add
  2 set-remove
  set-as-list
end


## Union ##
```
def set-union  2      # set1 set2
  as scd              # set1   scd -> set2
  as set              #   set -> set1

  def add  1            # i
    scd swap pull   # keys elem-i
    popnos          # elem-i
    set swap        # set elemi add elem
    set-add         # add element of second into into first set
    up ...set
  end  0

  0 scd.num 1 &add for
  set
end  1                # set (combined)
```
assert
  [ 1 2 3 ]
from
  set-create  # ()
  1 set-add
  2 set-add   # (1 2)
  set-create  # (1 2) ()
  3 set-add
  2 set-add   # (1 2) (3 2)
  set-union   # (1 2 3)
  set-as-list
end

## Intersection ##
```
def set-intersect  2      # set1 set2
  as scd                  # set   scd -> set2
  as set                  #    set -> set1
  set-create as new       #    new -> result

  def check  1
    set swap pull     # set-keys elem-i
    popnos            # elem-i
    dup scd rot3      # elem-i scd.keys elem-i
    list-find         # elem-i True|False index|nil
    as index          # elem-i True|False    index -> index|nil
    unless break pop  # if not contained: nothing to do
    new swap set-add  # new (added)
    up ...new         #    new -> (updated)
  end  0

  0 set.num 1 &check for
  new
end  1                # set (combined)
```
assert
  [ 2 ]
from
  set-create 1 set-add 2 set-add
  set-create 2 set-add 3 set-add
  set-intersect
  set-as-list
end


## Difference ##
```
def set-difference  2   # set1 set2
  as scd
  as set

  def check  1                # i
    scd swap pull popnos      # elem-i
    set swap list-find        # T|F index|nil
    as index                  #    index -> index|nil
    unless break              # skip this element if not in set1
    set index list-swap-last  # remove found element at position index from set1
    up ...set                 # update set structure
  end  0

  0 scd.num 1 &check for
  set
end  1                        # set (combined)
```
assert
  [ 1 ]
from
  set-create 1 set-add 2 set-add
  set-create 2 set-add 3 set-add
  set-difference
  set-as-list
end
