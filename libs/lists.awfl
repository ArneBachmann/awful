# List operations
### list-create 0/1, list-len 1/1, list-get 2/1, list-popi 2/2, list-pop 2/1, list-dropi 2/1, list-drop-last 1/1, list-drop-first 1/1, list-copy, list-concat, list-split-at, list-append, list-swap-last, reduce, map, filter, list-max, list-min, list-sum, list-find, list-reverse, list-from-stack, list-to-stack, reverse, range

include basicmaths
include basics
include loops


## Create a list from n elements on the stack
```
def list-create  0
  4 0 ""                          # :type :num ""
  :num pushi                      # :type {num: 0}
  :type pushi                     # {num: 0, type: LIST}
end  1
```
assert
  [ ] 4 0                          # literal list notation
from
  list-create                     # []
  :num pull                       # [] 0
  swap                            # 0 []
  :type pull                      # 0 [] 4
  rot3                            # [] 4 0
end


## Determine length of list
```
def list-len  1
  :num pull popnos
end  1
```
assert
  0 1 2
from
  [ ] list-len
  [ :x ] list-len
  [ 1 2 ] list-len
end


## Get a list element
```
def list-get  2     # list index
  pull popnos       # elem
end  1
```
assert
  :x
from
  [ 1 :x ] 1 list-get
end


## Set a list element
```
def list-set  3     # list index value
  3tor push         # value list index
end  1
```
assert
  [ 1 :x 3 ]
from
  [ 1 2 3 ] 1 :x list-set
end


## Helper function to copy elements between list structures
```
def list-copy  5                  # source-list target-list from-index to-index count
  as count
  as to
  as start
  as target
  as source
  source.num                      # source-num
  start count +                   # source-num start+count
  1 -                             # source-num start+count-1
  lt if break "list-copy source out of bounds"

  def list-copy'  1                     # i
    dup start +                   # i i+start
    source swap pull              # i source elem-n
    popnos                        # i elem-n
    swap                          # elem-n i
    to +                          # elem-n i+to
    target swap                   # elem-n i+to target
    push                          # target-updated
    up ...target                  # 3 parents: copy->for'->for
  end  0

  count &list-copy' for-range             # copy loop (Python: for i in range(0, count, 1))
  target :num pull                # target num
  to count + lt if (              # if num is too low
    to count + swap :num pushi    # increase size WARN could leave out elements before "to"
  )
end  1
```
assert
  [ 1 2 3 4 5 ]
from
   [ 4 5 ] [ 1 2 3 2 1 ] 0 3 2 list-copy    # copy [ 4 5 ] to the end of the second list
end


## Concatenate two lists
```
def list-concat  2
  :num pull as len
  as b
  :num pull as offset
  as a

  def list-concat'  1  # loop function
    dup             # i i    duplicate loop index
    b swap          # i b i
    pull            # i b b_i  get i-th element from b
    popnos          # i b_i
    swap .offset +  # b_i i+offset
    a swap push     # a <+ b_i
    up ...a
  end  0

  len &list-concat' for-range
  a len offset + swap :num pushi  # update list length
end  1
```
assert
  [ 10 11 12 13 14 15 ]
from
  [ 10 11 ] [ 12 13 14 15 ] list-concat
end


## Crop a list to the internally specified number of elements by copying
```
def list-crop'  1             # l
  as l                        #     l -> l
  l [ ] 0 0 l.num list-copy   # l (cropped)
end  1
```
assert
  [ 1 2 ]
from
  2 [ 1 2 3 ] :num pushi
  list-crop'
end


## Split a list into two lists at a given index
```
def list-split-at  2  # list index
  as index            # l   index -> index
  dup list-len
  0 eq if error "Cannot split empty list"
  :num pull dup       # l l:num l:num
  as len              # l l:num   len -> l:num
  index - as num      # l   num -> num-index (to-move-count)
  as l                #     l -> l
  [ ] as n            #     n -> []

  def list-split-at' 1           # i (0..num-1)
    dup l swap index +  # i l index+i
    pull                # i l elem
    popnos              # i elem
    n                   # i elem n
    rot3                # elem n i
    push                # n (with elem)
    up ...n             #    n -> n
  end  0

  num &list-split-at' for-range
  index l :num pushi      # update counter of original list
  list-crop'              # remove all elements over index
  num n :num pushi        # set counter of freshly created split list
end  2                  # list1 list2
```
assert
  [ 1 2 ] [ 3 4 ]
  [ :x ] [ ]
  [ ] [ :x ]
from
  [ 1 2 3 4 ] 2 list-split-at
  [ :x ] 1 list-split-at
  [ :x ] 0 list-split-at
end


## Split a list at given substrings
#def list-split  2  # list index
#end  2             # prefix suffix


## Join substrings with a separator
#def list-join         list-of-lists separator
#  as sep
#end


## List insertion
#def list-insert 3  # list insert index
#  rot3 swap        # insert list index
#  list-split       # insert prefix suffix
#end


## Append one element to a list
```
def list-append  2                # list value
  as value
  as list'
  value list' list'.num push      # store new value
  list'.num 1 + swap :num pushi   # increase length
end  1                            # list-with-value
```
assert
  [ 1 2 False 3 ]
from
  [ 1 2 False ] 3 list-append
end


## Remove one element replacing it with the one at the last, reducing the list size by one
```
def list-swap-last  2   # list index
  as index              # list   index -> index
  :num pull 1 -         # list num-1
  as last               # list   last -> num-1
  last pull             # list last
  swap index push       # list (updated)
  last swap :num pushi  # list (updated)
  list-crop'            # remove unused entry
end  1                  # list
```
assert
  [ 3 2 ]
from
  [ 1 2 3 ] 0 list-swap-last
end


## Pop one element from the list
```
def list-popi  2    # list index
  list-split-at     # prefix list-rest
  1 list-split-at   # prefix [elem] suffix
  swap              # prefix suffix [elem]
  0 list-get        # prefix suffix elem
  as elem           # prefix suffix
  list-concat elem  # list elem
end  2              # list elem
```
assert
  [ 1 2 4 ] 3
  [ ] :a
  [ :a ] [ ] :ERROR # because the empty right-hand string cannot extract an element
from
  [ 1 2 3 4 ] 2 list-popi
  [ :a ]      0 list-popi
  [ :a ]      1 list-popi
end


## Pop last element from the list
```
def list-pop  1     # list
  :num pull 1 -
  list-popi
end  2              # list elem
```
assert
  [ 1 2 ] 3
from
  [ 1 2 3 ] list-pop
end


## Drop one element from the list
```
def list-dropi  2     # list index
  list-popi pop
end  1
```
assert
  [ 1 2 4 ]
  [ 2 3 4 ]
from
  [ 1 2 3 4 ] 2 list-dropi
  [ 1 2 3 4 ] 0 list-dropi
end


## Drop the last element from the list
```
def list-drop-last  1  # list
  list-pop pop
end  1              # list
```
assert
  [ 1 2 ]
from
  [ 1 2 3 ] list-drop-last
end


## Drop the first element from the list
```
def list-drop-first  1  # list
  0 list-dropi
end  1
```
assert
  [ 2 3 ]
from
  [ 1 2 3 ] list-drop-first
end


## Extract head from list
```
def list-head  1  # list
  0 list-popi popnos
end  1            # list head
```
assert
  1
from
  [ 1 2 3 ] list-head
end


## Extract tail from list
```
def list-tail  1  # list-rest
  0 list-popi pop
end  1
```
assert
  [ 2 3 ]
from
  [ 1 2 3 ] list-tail
end


## Reduce over a list
```
def reduce  3         # list initial func(2->1)
  as func
  as last
  :num pull as num    # elements in l
  as l

  def reduce'  1     # i
    l swap pull   # l elem-i
    popnos        # elem-i
    last          # elem-i last
    swap          # last elem-i
    ...func apply    # result
    up ...last    # -
  end  0

  num &reduce' for-range
  last
end  1            # result of reduction
assert
  6
from
  def add 2 + end 1
  [ 1 2 3 ] 0 &add reduce
end
```


## Map over a list
```
def map  2          # list func
  as map-func       #   func -> func
  :num pull as num  #   num -> num
  as l              #   l -> l

  def map''  1       # i
    as i            #   i -> i
    l i pull        # l elem-i
    popnos          # elem-i
    map-func apply  # l func(elem-i)
    l i push        # l(updated)
    up ...l         #   l -> l
  end  0            # -

  num &map'' for-range
  l
end  1              # mapped list
```
assert
  [ 0 2 3 4 ]
from
  def times2  1
    2 *
  end  1
  [ 0 1 1.5 2 ] &times2 map
end


## Filter a list
def filter  2       # list predicate
  as pred           # elem->bool
  :num pull as num  # num->list.num
  as list'
  [ ] as result

  def filter'  1
    list' swap pull popnos dup
    pred apply unless break pop
    result swap list-append up result
  end  0

  num &filter' for-range
  result
end  1              # filtered list
assert
  [ 1 3 5 7 9 ]
from
  def odd  1
    2 % 1 eq
  end  1
  assert True False True False from 1 odd 2 odd -1 odd 0 odd end
  [ 0 1 2 3 4 5 6 7 8 9 ] &odd filter     # 0 10 1 range
end


## Determine the highest element from a list of numbers
```
def list-minmax'  2   # list pair-func
  as func             # takes last and next elements and returns new aggregate

  def list-minmax''  2      # last elem
    swap as last      # elem   last -> last
    last              # elem last
    is-nil            # elem last-is-nil
    if break          # return elem -> use as first result
    last swap         # elem last
    .....func apply   # last(*)elem
  end  1

  nil &list-minmax'' reduce
end  1
```

## Determine the highest element from a list of numbers
```
def list-max  1   # list

  def list-max'  2    # last elem
    2dup          # last elem last elem
    ge            # last elem last>=elem
    cond          # last/elem
  end  1

  &list-max' list-minmax'
end  1
```
assert
  4
from
  [ -2 0 1 4 2 -10 ] list-max
end


## Determine the lowest element from a list of numbers
```
def list-min  1   # list

  def list-min'  2    # last elem
    2dup          # last elem last elem
    le            # last elem last<=elem
    cond          # last/elem
  end  1

  &list-min' list-minmax'
end  1
```
assert
  -10
from
  [ -2 0 1 4 2 -10 ] list-min
end


## Determine the sum of all numbers in a list
```
def list-sum  1   # list
  def add  2
    +
  end  1
  0 &add reduce
end  1
```
assert
  15
from
  [ 1 2 3 4 5 ] list-sum
end


## Find first occurrence of an element in the list
```
def list-find  2        # list value
  as value              # what to search, and index found
  as list
  False as found
  list.num as num

  def list-find'  1             # i
    as i                        #    i -> i, also pops the value
    ..found if break            # already found, nothing to do
    list i pull                 # list elem-i
    popnos                      # elem-i
    :type pull                  # elem-i type-i
    ..value :type pull popnos   # elem-i elem-type value-type
    ne if break pop             # not the same type - assume different values as well
    ..value eq if break i up ..value True up ..found
  end  0

  num &list-find' for-range
  found dup if break value
  nil
end  2  # :ok|nil nil|index
```
assert
  False nil
from
  [ ] nil list-find
end
assert
  True 4
from
  [ 1 2 3 4 nil 5 ] nil list-find
end
assert
  True 2
from
  [ 1 2 3 4 nil 5 ] 3 list-find
end


## Reverse a list
```
def list-reverse  1
  :num pull as num
  as list'
  def floor'  1 dup 1 % - end  1

  def list-reverse'  1
    as i
    list' i pull swap     # elem-i list
    num i - 1 - pull      # elem-i list elem-i-n-1
    swap                  # elem-i elem-i-n-1 list
    i push                # elem-i list
    num i - 1 - push      # list
    up list'
  end  0


  0 num 2 / floor' 1 &list-reverse' for    # 4: 0..1(3..2), 5: 0..1(4..3)
  list'
end  1
```
assert
  [ ]
  [ 0 ]
  [ 1 0 ]
  [ 2 1 0 ]
  [ 3 2 1 0 ]
from
  [ ] list-reverse
  [ 0 ] list-reverse
  [ 0 1 ] list-reverse
  [ 0 1 2 ] list-reverse
  [ 0 1 2 3 ] list-reverse
end


## Consume elements from stack into one list
```
def list-from-stack  2    # elements num
  as n
  list-create

  def list-from-stack'  1    # elements... list
    n is-zero if break
    n 1 - up n
    swap          # elements list elem
    list-append   # append element to end of list (reversed)
    list-from-stack'
  end  ?

  list-from-stack'
  list-reverse
end  ?
```
assert
  1 [ 2 3 ]
from
  1 2 3 2 list-from-stack
end


## Expand list to stack
```
def list-to-stack  1
  :num pull as n
  0 as i

  def list-to-stack'  1            # list'
    i n eq if break pop   # break condition
    dup i list-get        # list' elem-i
    i 1 + up i            # i->i+1
    swap                  # elem-i list'
    list-to-stack'
  end  ?
  list-to-stack'
end  ?
```
assert
  1 2 3
from
  1 [ 2 3 ] list-to-stack
end


## Reverse order of elements on stack. TODO could also be implemented using only nib and bin TODO fits best in stack.awfl
```
def reverse  2  # elements... num
  list-from-stack
  list-reverse
  list-to-stack
end  1
```
assert
  3 2 1
from
  1 2 3 3 reverse
end


## Create a range of integers
```
def range  3                # from to+1 step
  list-create as list'

  def range'  1
    list'
    swap list-append
    up list'
  end  0

  &range' for
  list'
end  1
```
assert
  [ 2 4 6 ]
from
  2 8 2 range     # TODO 2 7 2 range doesn't work currently, fix for loop first
end


## List sorting algorithm (the worst: selection sort)
```
def list-sort  1
  :num pull as num
  as list'
  list-create as result

  def list-sort'  1
    pop                                 # index not needed
    list' list-min as min'              # get next minimum
    list' min' list-find as index pop   #
    list' index list-swap-last up list'
    result min' list-append up result
  end  0

  num &list-sort' for-range
  result
end  1
```
assert
  [ -4 0 1 2 3 5 ]
from
  [ 3 5 2 1 0 -4 ] list-sort
end
