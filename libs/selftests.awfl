# Test the interpreter's built-ins #


## Test empty assert body ##
assert from 1 pop end


## Test comparisons ##
assert True      from nil nil eq end
assert False     from nil 0 eq end
assert 2  1      from 1 2 1 nib end
assert 1 :x 2 3  from 1 2 3 :x 2 bin end  # push :x two positions to down the stack


## Test binary functions ##
assert 8 from 123 12 band end
assert 127 from 123 12 bor end
assert 119 from 123 12 bxor end


## Test maths functions ##
assert 1  1.5    from 3 2 // end
assert 34.567    from 34.3 0.267 + end
assert ""        from "" end  # test empty string


## Test nested functions ##
assert
  3
from
  def nested  0
    def add2  1
      2 +
    end  1
    1 add2
  end  1
  nested
end


## Test variable and outer scope ##
def _var_test  0
  1 as a        # defines local a
  a .x + up .x  # updates x
  2 a +         # increases a
end  1
  assert 3     from 20 as x _var_test end
  assert 3 21 from 20 as x _var_test x end
rm :_var_test   # undef function (as we are in global scope here!)


## Literal lists ##
assert [ ] from [ ] end
assert [ 1 ] from [ 1 ] end
assert [ :x [ 1 2 ] ] from [ :x [ 1 2 ] ] end
assert [ :x [ ] ] from [ :x [ ] ] end


## Test conditional break block ##
assert
from
  def a  1
    if break 1 [ 2 ] 3
    -1 -2 -3
  end  3
  assert 1 [ 2 ] 3 from True  a end
  assert -1 -2 -3  from False a end
end


## Test nested variable access ##
assert
  :test :sub!
from
  "sub!" "test" :sub push as var  # "test"{sub => sub!}
  var
  var.sub
end


## Test grouping ##
assert
  4
from
  ( 1 2 ) True if ( 3 + + )
  ( 2 - )
end
assert
  1 0
from
  ( 1 2 ) False if ( 3 + + )
  ( 2 - )
end
